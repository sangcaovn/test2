{
    "smart_contracts": [
        {
            "smart_contract_version_id": "101",
            "code": "display_name = \"Credit Card\"\napi = \"3.0.0\"\nversion = \"0.0.1\"\nsummary = \"Customer credit card account\"\ntside = Tside.ASSET\nsupported_denominations = [\"VND\"]\n\n\nTRANSACTION_TYPES = {\"PURCHASE\", \"LOAN_ON_CARD\"}\nSTATES = (\"UNCHARGED\", \"CHARGED\", \"BILLED\", \"UNPAID\")\n\nINTERNAL_ADDRESS = \"INTERNAL\"\nAVAILABLE_BALANCE_ADDRESS = \"AVAILABLE_BALANCE\"\nOUTSTANDING_ADDRESS = \"OUTSTANDING\"\nFULL_OUTSTANDING_ADDRESS = \"FULL_OUTSTANDING\"\n\nLATE_FEE_CHARGED_ADDRESS = \"LATE_FEE_CHARGED\"\nLATE_FEE_BILLED_ADDRESS = \"LATE_FEE_BILLED\"\nANNUAL_FEE_ADDRESS = \"ANNUAL_FEE\"\n\nBANK_CREDIT_DEFAULT_ACCOUNT = \"CREDIT_DEFAULT\"\nBANK_CREDIT_INTEREST_ACCOUNT = \"CREDIT_INTEREST\"\nBANK_CREDIT_LATE_FEE_ACCOUNT = \"CREDIT_LATE_FEE\"\nBANK_CREDIT_ANNUAL_FEE_ACCOUNT = \"CREDIT_ANNUAL_FEE\"\n\nFLOAT_TOLERANCE = 1e-3\n\n\ndef _get_transaction_type_apr(annual_percentage_rate, transaction_type):\n    transaction_apr = None\n    for transaction_type in annual_percentage_rate.keys():\n        transaction_apr = transaction_type[transaction_type.lower()]\n    return Decimal(transaction_apr)\n\n\ndef _get_parameter_latest_value(vault, name):\n    return vault.get_parameter_timeseries(name=name).latest()\n\n\ndef _get_first_scod(account_creation_date):\n    return account_creation_date + timedelta(months=1)\n\n\ndef _get_first_pdd(first_scod, grace_period):\n    virtual_pdd = first_scod + timedelta(days=grace_period)\n    return virtual_pdd.replace(day=min(virtual_pdd.day, 28))\n\n\ndef _get_next_pdd(current_pdd):\n    return current_pdd + timedelta(months=1)\n\n\ndef _get_corresponding_scod(pdd, grace_period):\n    return pdd - timedelta(days=grace_period)\n\n\ndef _get_daily_interest_rate(transaction_type_annual_rate):\n    daily_interest_rate = transaction_type_annual_rate / 365\n    return daily_interest_rate\n\n\ndef _precision_accrual(amount):\n    return amount.copy_abs().quantize(Decimal(\".000\"), rounding=ROUND_HALF_UP)\n\n\ndef _precision_fulfillment(amount):\n    return amount.copy_abs().quantize(Decimal(\".00\"), rounding=ROUND_HALF_UP)\n\n\nPercentageShape = NumberShape(\n    kind=NumberKind.PERCENTAGE,\n    min_value=0,\n    max_value=1,\n    step=0.001,\n)\n\nMoneyShape = NumberShape(\n    kind=NumberKind.MONEY,\n    min_value=0,\n    # max_value=1000,\n    step=1,\n)\n\n\nparameters = [\n    Parameter(\n        name=\"denomination\",\n        shape=DenominationShape,\n        level=Level.TEMPLATE,\n        description=\"Currency in which the product operates.\",\n        display_name=\"Denomination\",\n        default_value=\"VND\",\n    ),\n    Parameter(\n        name=\"credit_limit\",\n        level=Level.INSTANCE,\n        description=\"The line of credit agreed between the customer and the bank.\",\n        display_name=\"Credit limit\",\n        default_value=Decimal(\"0\"),\n        shape=MoneyShape(\n            min_value=10_000_000,\n            max_value=100_000_000,\n            step=1_000,\n        ),\n        update_permission=UpdatePermission.USER_EDITABLE_WITH_OPS_PERMISSION,\n    ),\n    Parameter(\n        name=\"grace_period\",\n        level=Level.TEMPLATE,\n        description=(\n            \"Number of days after the statement cut-off-date for the customer \"\n            \"to pay the due balance without incurring interest charges.\"\n        ),\n        display_name=\"Payment period (days)\",\n        shape=NumberShape(\n            kind=NumberKind.PLAIN,\n            min_value=1,\n            max_value=25,\n            step=1,\n        ),\n        default_value=Decimal(25),\n        update_permission=UpdatePermission.USER_EDITABLE,\n    ),\n    Parameter(\n        name=\"transaction_types\",\n        level=Level.TEMPLATE,\n        description=\"Supported types of transactions for credit account.\",\n        display_name=\"Credit card supported transaction types\",\n        shape=StringShape,\n        default_value=json_dumps(\n            [\"purchase\", \"cash_advance\", \"loan_on_card\", \"balance_transfer\"]\n        ),\n    ),\n    Parameter(\n        name=\"annual_percentage_rate\",\n        level=Level.TEMPLATE,\n        description=\"Annual percentage rate of the account\",\n        display_name=\"APR\",\n        shape=StringShape,\n        default_value=json_dumps(\n            {\n                \"purchase\": \"0.01\",\n                \"cash_advance\": \"0.02\",\n                \"loan_on_card\": \"0.03\",\n                \"balance_transfer\": \"0.04\",\n            }\n        ),\n    ),\n    Parameter(\n        name=\"late_repayment_fee_rate\",\n        level=Level.TEMPLATE,\n        description=(\n            \"A flat fee charged if the customer fails to pay the due balance by the \"\n            \"payment due date.\"\n        ),\n        display_name=\"Late payment fee rate\",\n        shape=MoneyShape,\n        default_value=Decimal(\"0.05\"),\n        update_permission=UpdatePermission.USER_EDITABLE_WITH_OPS_PERMISSION,\n    ),\n    Parameter(\n        name=\"annual_credit_card_fee\",\n        level=Level.INSTANCE,\n        description=\"Fee charged annually\",\n        display_name=\"Credit card fee charged annually\",\n        shape=MoneyShape,\n        default_value=Decimal(300),\n        update_permission=UpdatePermission.USER_EDITABLE_WITH_OPS_PERMISSION,\n    ),\n]\n\n\n@requires(parameters=True, balances=\"latest\", last_execution_time=[\"STATEMENT_CUT_OFF\"])\ndef post_posting_code(postings, effective_date):\n    denomination = _get_parameter_latest_value(vault, \"denomination\")\n    for posting in postings:\n        amount = posting.amount\n        if (\n            posting.type == PostingInstructionType.HARD_SETTLEMENT\n            and posting.instruction_details.get(\"type\") == \"TRANSACTION\"\n        ):\n            _process_transaction(\n                vault,\n                amount,\n                denomination,\n                effective_date,\n                posting.instruction_details.get(\"transaction_type\"),\n            )\n        elif (\n            posting.type == PostingInstructionType.HARD_SETTLEMENT\n            and posting.instruction_details.get(\"type\") == \"REPAYMENT\"\n        ):\n            _process_repayment(vault, amount, denomination, effective_date)\n        elif (\n            posting.type == PostingInstructionType.HARD_SETTLEMENT\n            and posting.instruction_details.get(\"type\") == \"ANNUAL_FEE\"\n        ):\n            _process_annual_fee(vault, amount, denomination, effective_date)\n        elif posting.instruction_details.get(\"type\") == \"LOAN_ON_CARD_ACTIVATION\":\n            _process_opening_loan_on_card(vault, amount, denomination, effective_date)\n\n\ndef _process_transaction(vault, amount, denomination, effective_date, transaction_type):\n    if transaction_type is None:\n        return\n\n    instructions = []\n\n    instructions.extend(\n        vault.make_internal_transfer_instructions(\n            amount=amount,\n            denomination=denomination,\n            client_transaction_id=(f\"OUTSTANDING_{vault.get_hook_execution_id()}\"),\n            instruction_details={},\n            from_account_id=vault.account_id,\n            from_account_address=OUTSTANDING_ADDRESS,\n            to_account_id=vault.account_id,\n            to_account_address=INTERNAL_ADDRESS,\n        )\n    )\n    instructions.extend(\n        vault.make_internal_transfer_instructions(\n            amount=amount,\n            denomination=denomination,\n            client_transaction_id=(f\"FULL_OUTSTANDING_{vault.get_hook_execution_id()}\"),\n            instruction_details={},\n            from_account_id=vault.account_id,\n            from_account_address=FULL_OUTSTANDING_ADDRESS,\n            to_account_id=vault.account_id,\n            to_account_address=INTERNAL_ADDRESS,\n        )\n    )\n    instructions.extend(\n        vault.make_internal_transfer_instructions(\n            amount=amount,\n            denomination=denomination,\n            client_transaction_id=(\n                f\"{transaction_type}_CHARGED_{vault.get_hook_execution_id()}\"\n            ),\n            instruction_details={},\n            from_account_id=vault.account_id,\n            from_account_address=f\"{transaction_type}_CHARGED\",\n            to_account_id=vault.account_id,\n            to_account_address=INTERNAL_ADDRESS,\n        )\n    )\n    instructions.extend(\n        vault.make_internal_transfer_instructions(\n            amount=amount,\n            denomination=denomination,\n            client_transaction_id=(\n                f\"AVAILABLE_BALANCE_ADDRESS_{vault.get_hook_execution_id()}\"\n            ),\n            instruction_details={},\n            from_account_id=vault.account_id,\n            from_account_address=INTERNAL_ADDRESS,\n            to_account_id=vault.account_id,\n            to_account_address=AVAILABLE_BALANCE_ADDRESS,\n        )\n    )\n\n    vault.instruct_posting_batch(\n        posting_instructions=instructions,\n        effective_date=effective_date,\n    )\n\n\ndef _process_repayment(vault, amount, denomination, effective_date):\n    def create_repayment_instructions(amount, id, from_address, to_address):\n        return vault.make_internal_transfer_instructions(\n            amount=amount,\n            denomination=denomination,\n            client_transaction_id=(f\"{id}_{vault.get_hook_execution_id()}\"),\n            from_account_id=vault.account_id,\n            from_account_address=from_address,\n            to_account_id=vault.account_id,\n            to_account_address=to_address,\n        )\n\n    def create_reduce_oustanding_instructions(amount, address_name):\n        return create_repayment_instructions(\n            amount,\n            f\"{address_name}_REDUCE_OUTSTANDING\",\n            INTERNAL_ADDRESS,\n            OUTSTANDING_ADDRESS,\n        )\n\n    def create_reduce_full_oustanding_instructions(amount, address_name):\n        return create_repayment_instructions(\n            amount,\n            f\"{address_name}_REDUCE_FULL_OUTSTANDING\",\n            INTERNAL_ADDRESS,\n            FULL_OUTSTANDING_ADDRESS,\n        )\n\n    def get_address_balance_net(address_name):\n        return abs(\n            effective_balance[\n                (address_name, DEFAULT_ASSET, denomination, Phase.COMMITTED)\n            ].net\n        )\n\n    effective_balance = vault.get_balance_timeseries().at(timestamp=effective_date)\n\n    remained_amount = amount\n    instructions = []\n\n    # Repay LATE_FEE_BILLED\n    late_fee_billed_balance_net = get_address_balance_net(LATE_FEE_BILLED_ADDRESS)\n    if late_fee_billed_balance_net > FLOAT_TOLERANCE:\n        late_fee_billed_to_reduce = min(late_fee_billed_balance_net, remained_amount)\n        remained_amount -= late_fee_billed_to_reduce\n        instructions.extend(\n            create_repayment_instructions(\n                late_fee_billed_to_reduce,\n                \"REDUCE_LATE_FEE_BILLED\",\n                INTERNAL_ADDRESS,\n                LATE_FEE_BILLED_ADDRESS,\n            )\n        )\n        instructions.extend(\n            create_reduce_full_oustanding_instructions(\n                late_fee_billed_to_reduce, LATE_FEE_BILLED_ADDRESS\n            )\n        )\n\n    for transaction_type in TRANSACTION_TYPES:\n        # Repay {transaction_type}_UNPAID\n        if remained_amount < FLOAT_TOLERANCE:\n            break\n        transaction_unpaid_balance_net = get_address_balance_net(\n            f\"{transaction_type}_UNPAID\"\n        )\n        if transaction_unpaid_balance_net > FLOAT_TOLERANCE:\n            transaction_unpaid_to_reduce = min(\n                transaction_unpaid_balance_net, remained_amount\n            )\n            remained_amount -= transaction_unpaid_to_reduce\n            instructions.extend(\n                create_repayment_instructions(\n                    transaction_unpaid_to_reduce,\n                    f\"REDUCE_{transaction_type}_UNPAID\",\n                    INTERNAL_ADDRESS,\n                    f\"{transaction_type}_UNPAID\",\n                )\n            )\n            instructions.extend(\n                create_repayment_instructions(\n                    transaction_unpaid_to_reduce,\n                    \"RESTORE_AVAILABLE_BALANCE_BY_TRANSACTION_UNPAID\",\n                    AVAILABLE_BALANCE_ADDRESS,\n                    INTERNAL_ADDRESS,\n                )\n            )\n            instructions.extend(\n                create_reduce_full_oustanding_instructions(\n                    transaction_unpaid_to_reduce, f\"{transaction_type}_UNPAID\"\n                )\n            )\n\n        # Repay {transaction_type}_INTEREST_UNPAID\n        if remained_amount < FLOAT_TOLERANCE:\n            break\n        transaction_interest_unpaid_balance_net = get_address_balance_net(\n            f\"{transaction_type}_INTEREST_UNPAID\"\n        )\n        if transaction_interest_unpaid_balance_net > FLOAT_TOLERANCE:\n            transaction_interest_unpaid_to_reduce = min(\n                transaction_interest_unpaid_balance_net, remained_amount\n            )\n            remained_amount -= transaction_interest_unpaid_to_reduce\n            instructions.extend(\n                create_repayment_instructions(\n                    transaction_interest_unpaid_to_reduce,\n                    f\"REDUCE_{transaction_type}_INTEREST_UNPAID\",\n                    INTERNAL_ADDRESS,\n                    f\"{transaction_type}_INTEREST_UNPAID\",\n                )\n            )\n            instructions.extend(\n                create_reduce_full_oustanding_instructions(\n                    transaction_interest_unpaid_to_reduce,\n                    f\"{transaction_type}_INTEREST_UNPAID\",\n                )\n            )\n\n        # Repay {transaction_type}_BILLED\n        if remained_amount < FLOAT_TOLERANCE:\n            break\n        transaction_billed_balance_net = get_address_balance_net(\n            f\"{transaction_type}_BILLED\"\n        )\n        if transaction_billed_balance_net > FLOAT_TOLERANCE:\n            transaction_billed_to_reduce = min(\n                transaction_billed_balance_net, remained_amount\n            )\n            remained_amount -= transaction_billed_to_reduce\n            instructions.extend(\n                create_repayment_instructions(\n                    transaction_billed_to_reduce,\n                    f\"REDUCE_{transaction_type}_BILLED\",\n                    INTERNAL_ADDRESS,\n                    f\"{transaction_type}_BILLED\",\n                )\n            )\n            instructions.extend(\n                create_repayment_instructions(\n                    transaction_billed_to_reduce,\n                    \"RESTORE_AVAILABLE_BALANCE_BY_TRANSACTION_BILLED\",\n                    AVAILABLE_BALANCE_ADDRESS,\n                    INTERNAL_ADDRESS,\n                )\n            )\n            instructions.extend(\n                create_reduce_full_oustanding_instructions(\n                    transaction_billed_to_reduce, f\"{transaction_type}_BILLED\"\n                )\n            )\n\n        # Repay {transaction_type}_INTEREST_BILLED\n        if remained_amount < FLOAT_TOLERANCE:\n            break\n        transaction_interest_billed_balance_net = get_address_balance_net(\n            f\"{transaction_type}_INTEREST_BILLED\"\n        )\n        if transaction_interest_billed_balance_net > FLOAT_TOLERANCE:\n            transaction_interest_billed_to_reduce = min(\n                transaction_interest_billed_balance_net, remained_amount\n            )\n            remained_amount -= transaction_interest_billed_to_reduce\n            instructions.extend(\n                create_repayment_instructions(\n                    transaction_interest_billed_to_reduce,\n                    f\"REDUCE_{transaction_type}_INTEREST_BILLED\",\n                    INTERNAL_ADDRESS,\n                    f\"{transaction_type}_INTEREST_BILLED\",\n                )\n            )\n            instructions.extend(\n                create_reduce_full_oustanding_instructions(\n                    transaction_interest_billed_to_reduce,\n                    f\"{transaction_type}_INTEREST_BILLED\",\n                )\n            )\n\n        # Repay {transaction_type}_CHARGED\n        if remained_amount < FLOAT_TOLERANCE:\n            break\n        transaction_charged_balance_net = get_address_balance_net(\n            f\"{transaction_type}_CHARGED\"\n        )\n        if transaction_charged_balance_net > FLOAT_TOLERANCE:\n            transaction_charged_to_reduce = min(\n                transaction_charged_balance_net, remained_amount\n            )\n            remained_amount -= transaction_charged_to_reduce\n            instructions.extend(\n                create_repayment_instructions(\n                    transaction_charged_to_reduce,\n                    f\"REDUCE_{transaction_type}_CHARGED\",\n                    INTERNAL_ADDRESS,\n                    f\"{transaction_type}_CHARGED\",\n                )\n            )\n            instructions.extend(\n                create_reduce_full_oustanding_instructions(\n                    transaction_charged_to_reduce,\n                    f\"{transaction_type}_CHARGED\",\n                )\n            )\n\n        # Repay {transaction_type}_INTEREST_CHARGED\n        if remained_amount < FLOAT_TOLERANCE:\n            break\n        transaction_interest_charged_balance_net = get_address_balance_net(\n            f\"{transaction_type}_INTEREST_CHARGED\"\n        )\n        if transaction_interest_charged_balance_net > FLOAT_TOLERANCE:\n            transaction_interest_charged_to_reduce = min(\n                transaction_interest_charged_balance_net, remained_amount\n            )\n            remained_amount -= transaction_interest_charged_to_reduce\n            instructions.extend(\n                create_repayment_instructions(\n                    transaction_interest_charged_to_reduce,\n                    f\"REDUCE_{transaction_type}_INTEREST_CHARGED\",\n                    INTERNAL_ADDRESS,\n                    f\"{transaction_type}_INTEREST_CHARGED\",\n                )\n            )\n            instructions.extend(\n                create_reduce_full_oustanding_instructions(\n                    transaction_interest_charged_to_reduce,\n                    f\"{transaction_type}_INTEREST_CHARGED\",\n                )\n            )\n\n    if instructions:\n        vault.instruct_posting_batch(\n            posting_instructions=instructions, effective_date=effective_date\n        )\n\n\ndef _process_opening_loan_on_card(vault, amount, denomination, effective_date):\n    _process_repayment(vault, amount, denomination, effective_date)\n\n\ndef _process_annual_fee(vault, amount, denomination, effective_date):\n    pass\n\n\n@requires(parameters=True)\ndef post_activate_code():\n    creation_date = vault.get_account_creation_date()\n    denomination = _get_parameter_latest_value(vault, \"denomination\")\n    credit_limit = _get_parameter_latest_value(vault, \"credit_limit\")\n\n    current_account_id = vault.account_id\n\n    instructions = vault.make_internal_transfer_instructions(\n        amount=credit_limit,\n        denomination=denomination,\n        client_transaction_id=f\"INIT_AVAILABLE_BALANCE_{vault.get_hook_execution_id()}\",\n        from_account_id=current_account_id,\n        from_account_address=AVAILABLE_BALANCE_ADDRESS,\n        to_account_id=current_account_id,\n        to_account_address=INTERNAL_ADDRESS,\n        instruction_details={\n            \"description\": \"Account activation. Init available balances.\",\n            \"type\": \"CREDIT_ACCOUNT_ACTIVATION\",\n        },\n    )\n    instructions.extend(\n        vault.make_internal_transfer_instructions(\n            amount=Decimal(1),\n            denomination=denomination,\n            client_transaction_id=f\"INIT_OUTSTANDING_{vault.get_hook_execution_id()}\",\n            from_account_id=current_account_id,\n            from_account_address=OUTSTANDING_ADDRESS,\n            to_account_id=current_account_id,\n            to_account_address=INTERNAL_ADDRESS,\n            instruction_details={\n                \"description\": \"Account activation. Init outstanding balances.\",\n                \"type\": \"CREDIT_ACCOUNT_ACTIVATION\",\n            },\n        )\n    )\n    instructions.extend(\n        vault.make_internal_transfer_instructions(\n            amount=Decimal(1),\n            denomination=denomination,\n            client_transaction_id=f\"RESET_OUTSTANDING_{vault.get_hook_execution_id()}\",\n            from_account_id=current_account_id,\n            from_account_address=INTERNAL_ADDRESS,\n            to_account_id=current_account_id,\n            to_account_address=OUTSTANDING_ADDRESS,\n            instruction_details={\n                \"description\": \"Account activation. Init outstanding balances.\",\n                \"type\": \"CREDIT_ACCOUNT_ACTIVATION\",\n            },\n        )\n    )\n    instructions.extend(\n        vault.make_internal_transfer_instructions(\n            amount=Decimal(1),\n            denomination=denomination,\n            client_transaction_id=(\n                f\"INIT_FULL_OUTSTANDING_{vault.get_hook_execution_id()}\"\n            ),\n            from_account_id=current_account_id,\n            from_account_address=INTERNAL_ADDRESS,\n            to_account_id=current_account_id,\n            to_account_address=FULL_OUTSTANDING_ADDRESS,\n            instruction_details={\n                \"description\": \"Account activation. Init full_outstanding balances.\",\n                \"type\": \"CREDIT_ACCOUNT_ACTIVATION\",\n            },\n        )\n    )\n    instructions.extend(\n        vault.make_internal_transfer_instructions(\n            amount=Decimal(1),\n            denomination=denomination,\n            client_transaction_id=(\n                f\"RESET_FULL_OUTSTANDING_{vault.get_hook_execution_id()}\"\n            ),\n            from_account_id=current_account_id,\n            from_account_address=FULL_OUTSTANDING_ADDRESS,\n            to_account_id=current_account_id,\n            to_account_address=INTERNAL_ADDRESS,\n            instruction_details={\n                \"description\": \"Account activation. Init full_outstanding balances.\",\n                \"type\": \"CREDIT_ACCOUNT_ACTIVATION\",\n            },\n        )\n    )\n\n    vault.instruct_posting_batch(\n        posting_instructions=instructions, effective_date=creation_date\n    )\n\n\n@requires(\n    event_type=\"STATEMENT_CUT_OFF\",\n    balances=\"latest\",\n    parameters=True,\n)\n@requires(\n    event_type=\"PAYMENT_DUE_DATE\",\n    balances=\"latest\",\n    parameters=True,\n)\n@requires(\n    event_type=\"ACCRUE_TRANSACTION_INTEREST_UNCHARGED\",\n    balances=\"1 day\",\n    parameters=True,\n)\ndef scheduled_code(event_type, effective_date):\n    if event_type == \"STATEMENT_CUT_OFF\":\n        _process_statement_cut_off(vault, effective_date)\n    # BUG: This will be wrong if the grace period is longer than 30 days\n    elif event_type == \"PAYMENT_DUE_DATE\":\n        _process_payment_due_date(vault, effective_date)\n        _adjust_scod(vault, effective_date)\n    elif event_type == \"ACCRUE_TRANSACTION_INTEREST_UNCHARGED\":\n        _accrue_transaction_interest_uncharged(\n            vault, effective_date - timedelta(microseconds=1)\n        )\n\n\ndef _process_statement_cut_off(vault, effective_date):\n    def get_effective_balance_net(address_name):\n        return abs(\n            effective_balance[\n                (address_name, DEFAULT_ASSET, denomination, Phase.COMMITTED)\n            ].net\n        )\n\n    def change_charged_to_billed(name):\n        address_billed = f\"{name}_BILLED\"\n        address_charged = f\"{name}_CHARGED\"\n        address_charged_balance_net = get_effective_balance_net(address_charged)\n        if address_charged_balance_net > FLOAT_TOLERANCE:\n            return vault.make_internal_transfer_instructions(\n                amount=address_charged_balance_net,\n                denomination=denomination,\n                client_transaction_id=(\n                    f\"{name}_CHARGED_TO_BILLED_{vault.get_hook_execution_id()}\"\n                ),\n                instruction_details={},\n                from_account_id=vault.account_id,\n                from_account_address=address_billed,\n                to_account_id=vault.account_id,\n                to_account_address=address_charged,\n            )\n        return []\n\n    effective_balance = vault.get_balance_timeseries().at(timestamp=effective_date)\n    denomination = _get_parameter_latest_value(vault, \"denomination\")\n\n    instructions = []\n    oustanding_balance_net = get_effective_balance_net(OUTSTANDING_ADDRESS)\n    if oustanding_balance_net > FLOAT_TOLERANCE:\n        instructions.extend(\n            vault.make_internal_transfer_instructions(\n                amount=oustanding_balance_net,\n                denomination=denomination,\n                client_transaction_id=(\n                    f\"RESET_OUTSTANDING_{vault.get_hook_execution_id()}\"\n                ),\n                instruction_details={},\n                from_account_id=vault.account_id,\n                from_account_address=INTERNAL_ADDRESS,\n                to_account_id=vault.account_id,\n                to_account_address=OUTSTANDING_ADDRESS,\n            )\n        )\n\n    for transaction_type in TRANSACTION_TYPES:\n        for name in {transaction_type, f\"{transaction_type}_INTEREST\"}:\n            instructions.extend(change_charged_to_billed(name))\n    instructions.extend(change_charged_to_billed(\"LATE_FEE\"))\n\n    if instructions:\n        vault.instruct_posting_batch(\n            posting_instructions=instructions, effective_date=effective_date\n        )\n\n\ndef _process_payment_due_date(vault, effective_date):\n    def apply_transaction_uncharged_to_charged(transaction_type):\n        transaction_interest_uncharged_net = abs(\n            effective_balance[\n                (\n                    f\"{transaction_type}_INTEREST_UNCHARGED\",\n                    DEFAULT_ASSET,\n                    denomination,\n                    Phase.COMMITTED,\n                )\n            ].net\n        )\n        if transaction_interest_uncharged_net > FLOAT_TOLERANCE:\n            instructions.extend(\n                vault.make_internal_transfer_instructions(\n                    amount=transaction_interest_uncharged_net,\n                    denomination=denomination,\n                    client_transaction_id=(\n                        \"TRANSACTION_INTEREST_UNCHARGED_TO_CHARGED_\"\n                        f\"{vault.get_hook_execution_id()}\"\n                    ),\n                    instruction_details={},\n                    from_account_id=vault.account_id,\n                    from_account_address=f\"{transaction_type}_INTEREST_CHARGED\",\n                    to_account_id=vault.account_id,\n                    to_account_address=f\"{transaction_type}_INTEREST_UNCHARGED\",\n                )\n            )\n            instructions.extend(\n                vault.make_internal_transfer_instructions(\n                    amount=transaction_interest_uncharged_net,\n                    denomination=denomination,\n                    client_transaction_id=(\n                        \"TRANSACTION_INTEREST_CHARGED_TO_FULL_OUTSTANDING_\"\n                        f\"{vault.get_hook_execution_id()}\"\n                    ),\n                    instruction_details={},\n                    from_account_id=vault.account_id,\n                    from_account_address=FULL_OUTSTANDING_ADDRESS,\n                    to_account_id=vault.account_id,\n                    to_account_address=INTERNAL_ADDRESS,\n                )\n            )\n            instructions.extend(\n                vault.make_internal_transfer_instructions(\n                    amount=transaction_interest_uncharged_net,\n                    denomination=denomination,\n                    client_transaction_id=(\n                        \"TRANSACTION_INTEREST_CHARGED_TO_OUTSTANDING_\"\n                        f\"{vault.get_hook_execution_id()}\"\n                    ),\n                    instruction_details={},\n                    from_account_id=vault.account_id,\n                    from_account_address=OUTSTANDING_ADDRESS,\n                    to_account_id=vault.account_id,\n                    to_account_address=INTERNAL_ADDRESS,\n                )\n            )\n\n    def reset_transaction_uncharged(transaction_type):\n        transaction_interest_uncharged_net = abs(\n            effective_balance[\n                (\n                    f\"{transaction_type}_INTEREST_UNCHARGED\",\n                    DEFAULT_ASSET,\n                    denomination,\n                    Phase.COMMITTED,\n                )\n            ].net\n        )\n        if transaction_interest_uncharged_net > FLOAT_TOLERANCE:\n            instructions.extend(\n                vault.make_internal_transfer_instructions(\n                    amount=transaction_interest_uncharged_net,\n                    denomination=denomination,\n                    client_transaction_id=(\n                        f\"RESET_INTEREST_UNCHARGED_{vault.get_hook_execution_id()}\"\n                    ),\n                    instruction_details={},\n                    from_account_id=vault.account_id,\n                    from_account_address=INTERNAL_ADDRESS,\n                    to_account_id=vault.account_id,\n                    to_account_address=f\"{transaction_type}_INTEREST_UNCHARGED\",\n                )\n            )\n\n    effective_balance = vault.get_balance_timeseries().at(timestamp=effective_date)\n    denomination = _get_parameter_latest_value(vault, \"denomination\")\n\n    instructions = []\n\n    for transaction_type in TRANSACTION_TYPES:\n        transaction_billed_balance_net = abs(\n            effective_balance[\n                (\n                    f\"{transaction_type}_BILLED\",\n                    DEFAULT_ASSET,\n                    denomination,\n                    Phase.COMMITTED,\n                )\n            ].net\n        )\n        if transaction_billed_balance_net > FLOAT_TOLERANCE:\n            postings_to_update = vault.make_internal_transfer_instructions(\n                amount=transaction_billed_balance_net,\n                denomination=denomination,\n                client_transaction_id=(\n                    f\"TRANSACTION_BILLED_TO_UNPAID_{vault.get_hook_execution_id()}\"\n                ),\n                instruction_details={\"type\": \"LATE_FEE\"},\n                from_account_id=vault.account_id,\n                from_account_address=f\"{transaction_type}_UNPAID\",\n                to_account_id=vault.account_id,\n                to_account_address=f\"{transaction_type}_BILLED\",\n            )\n            instructions.extend(postings_to_update)\n\n            late_repayment_fee_rate = Decimal(\n                _get_parameter_latest_value(vault, \"late_repayment_fee_rate\")\n            )\n            updated_effective_balance = _update_balances(\n                account_id=vault.account_id,\n                balances=effective_balance,\n                postings=postings_to_update,\n            )\n            late_fee = late_repayment_fee_rate * abs(\n                updated_effective_balance[\n                    f\"{transaction_type}_UNPAID\",\n                    DEFAULT_ASSET,\n                    denomination,\n                    Phase.COMMITTED,\n                ].net\n            )\n\n            if late_fee > FLOAT_TOLERANCE:\n                instructions.extend(\n                    vault.make_internal_transfer_instructions(\n                        amount=late_fee,\n                        denomination=denomination,\n                        client_transaction_id=(\n                            f\"LATE_FEE_CHARGED_{vault.get_hook_execution_id()}\"\n                        ),\n                        instruction_details={},\n                        from_account_id=vault.account_id,\n                        from_account_address=LATE_FEE_CHARGED_ADDRESS,\n                        to_account_id=vault.account_id,\n                        to_account_address=INTERNAL_ADDRESS,\n                    )\n                )\n                instructions.extend(\n                    vault.make_internal_transfer_instructions(\n                        amount=late_fee,\n                        denomination=denomination,\n                        client_transaction_id=(\n                            \"LATE_FEE_TO_FULL_OUTSTANDING_\"\n                            f\"{vault.get_hook_execution_id()}\"\n                        ),\n                        instruction_details={},\n                        from_account_id=vault.account_id,\n                        from_account_address=FULL_OUTSTANDING_ADDRESS,\n                        to_account_id=vault.account_id,\n                        to_account_address=INTERNAL_ADDRESS,\n                    )\n                )\n                instructions.extend(\n                    vault.make_internal_transfer_instructions(\n                        amount=late_fee,\n                        denomination=denomination,\n                        client_transaction_id=(\n                            f\"LATE_FEE_TO_OUTSTANDING_{vault.get_hook_execution_id()}\"\n                        ),\n                        instruction_details={},\n                        from_account_id=vault.account_id,\n                        from_account_address=OUTSTANDING_ADDRESS,\n                        to_account_id=vault.account_id,\n                        to_account_address=INTERNAL_ADDRESS,\n                    )\n                )\n\n        transaction_unpaid_balance_net = abs(\n            effective_balance[\n                (\n                    f\"{transaction_type}_UNPAID\",\n                    DEFAULT_ASSET,\n                    denomination,\n                    Phase.COMMITTED,\n                )\n            ].net\n        )\n        if (\n            transaction_billed_balance_net + transaction_unpaid_balance_net\n            > FLOAT_TOLERANCE\n        ):\n            apply_transaction_uncharged_to_charged(transaction_type)\n        else:\n            reset_transaction_uncharged(transaction_type)\n\n    if instructions:\n        vault.instruct_posting_batch(\n            posting_instructions=instructions, effective_date=effective_date\n        )\n\n\ndef _update_balances(account_id=\"\", balances=None, postings=None):\n    balances = balances or {}\n    postings = postings or []\n    updated_balances = defaultdict(\n        lambda: Balance(Decimal(0), Decimal(0), Decimal(0)),\n        {\n            dimensions: Balance(balance.credit, balance.debit, balance.net)\n            for dimensions, balance in balances.items()\n        },\n    )\n    for posting in postings:\n        if account_id == posting.account_id:\n            for dimensions, balance in posting.balances().items():\n                latest_balance = updated_balances[dimensions]\n                updated_balances[dimensions] = Balance(\n                    credit=latest_balance.credit + balance.credit,\n                    debit=latest_balance.debit + balance.debit,\n                    net=latest_balance.net + balance.net,\n                )\n    return updated_balances\n\n\ndef _adjust_scod(vault, effective_date):\n    next_pdd = _get_next_pdd(effective_date)\n    grace_period = int(_get_parameter_latest_value(vault, \"grace_period\"))\n    next_scod = _get_corresponding_scod(next_pdd, grace_period)\n    vault.amend_schedule(\n        event_type=\"STATEMENT_CUT_OFF\",\n        new_schedule={\n            \"day\": str(next_scod.day),\n            \"hour\": \"0\",\n            \"minute\": \"15\",\n        },\n    )\n\n\ndef _accrue_transaction_interest_uncharged(vault, effective_date):\n    denomination = _get_parameter_latest_value(vault, \"denomination\")\n    annual_percentage_rate = json_loads(\n        _get_parameter_latest_value(vault, \"annual_percentage_rate\")\n    )\n\n    instructions = []\n\n    for transaction_type in TRANSACTION_TYPES:\n        if transaction_type == \"LOAN_ON_CARD\":\n            continue\n        daily_transaction_interest_rate = (\n            Decimal(annual_percentage_rate[transaction_type.lower()]) / 365\n        )\n        effective_balances = vault.get_balance_timeseries().at(timestamp=effective_date)\n\n        transaction_billed_net = effective_balances[\n            (f\"{transaction_type}_BILLED\", DEFAULT_ASSET, denomination, Phase.COMMITTED)\n        ].net\n        transaction_billed_interest = _precision_accrual(\n            daily_transaction_interest_rate * transaction_billed_net\n        )\n        if transaction_billed_interest > FLOAT_TOLERANCE:\n            instructions.extend(\n                vault.make_internal_transfer_instructions(\n                    amount=transaction_billed_interest,\n                    denomination=denomination,\n                    client_transaction_id=(\n                        \"ACCRUE_DAILY_INTEREST_ON_BILLED_TRANSACTION_\"\n                        f\"{transaction_billed_net}\"\n                    ),\n                    from_account_id=vault.account_id,\n                    from_account_address=f\"{transaction_type}_INTEREST_UNCHARGED\",\n                    to_account_id=vault.account_id,\n                    to_account_address=INTERNAL_ADDRESS,\n                    asset=DEFAULT_ASSET,\n                    instruction_details={\n                        \"description\": (\n                            \"Daily interest accrue at \"\n                            f\"{daily_transaction_interest_rate:.2%} on \"\n                            f\"due balances of {transaction_billed_net}\"\n                        )\n                    },\n                )\n            )\n\n        transaction_unpaid_net = effective_balances[\n            (f\"{transaction_type}_UNPAID\", DEFAULT_ASSET, denomination, Phase.COMMITTED)\n        ].net\n        transaction_unpaid_interest = _precision_accrual(\n            daily_transaction_interest_rate * transaction_unpaid_net\n        )\n        if transaction_unpaid_interest > FLOAT_TOLERANCE:\n            instructions.extend(\n                vault.make_internal_transfer_instructions(\n                    amount=transaction_unpaid_interest,\n                    denomination=denomination,\n                    client_transaction_id=(\n                        \"ACCRUE_DAILY_INTEREST_ON_UNPAID_TRANSACTION_\"\n                        f\"{transaction_unpaid_net}\"\n                    ),\n                    from_account_id=vault.account_id,\n                    from_account_address=f\"{transaction_type}_INTEREST_UNCHARGED\",\n                    to_account_id=vault.account_id,\n                    to_account_address=INTERNAL_ADDRESS,\n                    asset=DEFAULT_ASSET,\n                    instruction_details={\n                        \"description\": (\n                            \"Daily interest accrue at \"\n                            f\"{daily_transaction_interest_rate:.2%} on \"\n                            f\"due balances of {transaction_unpaid_net}\"\n                        )\n                    },\n                )\n            )\n\n    if instructions:\n        vault.instruct_posting_batch(\n            posting_instructions=instructions, effective_date=effective_date\n        )\n\n\n@requires(parameters=True)\ndef execution_schedules():\n    account_creation_date = vault.get_account_creation_date()\n    grace_period = int(_get_parameter_latest_value(vault, \"grace_period\"))\n    first_scod = _get_first_scod(account_creation_date)\n    first_pdd = _get_first_pdd(first_scod, grace_period)\n\n    return (\n        (\n            \"STATEMENT_CUT_OFF\",\n            {\n                \"month\": str(first_scod.month),\n                \"day\": str(first_scod.day),\n                \"hour\": \"0\",\n                \"minute\": \"15\",\n            },\n        ),\n        (\n            \"PAYMENT_DUE_DATE\",\n            {\n                \"start_date\": str(first_pdd.date()),\n                \"day\": str(first_pdd.day),\n                \"hour\": \"0\",\n                \"minute\": \"30\",\n            },\n        ),\n        (\n            \"ACCRUE_TRANSACTION_INTEREST_UNCHARGED\",\n            {\n                \"hour\": \"0\",\n            },\n        ),\n    )\n\n\n@requires(parameters=True, balances=\"latest\")\ndef pre_posting_code(postings, effective_date):\n    denomination = _get_parameter_latest_value(vault, \"denomination\")\n\n    if any(posting.denomination not in denomination for posting in postings):\n        raise Rejected(\n            \"Cannot make transactions in given denomination; \"\n            \"transactions must be in {}\".format(denomination),\n            reason_code=RejectedReason.WRONG_DENOMINATION,\n        )",
            "smart_contract_param_vals": {
                "denomination": "VND",
                "grace_period": "25",
                "transaction_types": "purchase",
                "late_repayment_fee_rate": "0.05",
                "annual_percentage_rate": "{\"purchase\": \"0.03\", \"cash_advance\": \"0.02\", \"loan_on_card\": \"0.01\", \"balance_transfer\": \"0.04\"}"
            }
        },
        {
            "smart_contract_version_id": "102",
            "code": "# HEADER\ndisplay_name = \"Loan on Card\"\napi = \"3.9.0\"  # This is a V3 Smart Contract\nversion = \"0.0.1\"  # Use semantic versioning, this is explained in the overview document\nsummary = \"Enter one line summary of contract here\"\ntside = Tside.ASSET\n\n# LOC ADDRESS\nOUTSTANDING_PRINCIPAL = \"OUTSTANDING_PRINCIPAL\"\nOUTSTANDING_INTEREST = \"OUTSTANDING_INTEREST\"\nFEE = \"FEE\"\nDAILY_ACCRUED = \"DAILY_ACCRUED\"\nDAILY_PRINCIPAL = \"DAILY_PRINCIPAL\"\nINTERNAL_CONTRA = \"INTERNAL_CONTRA\"\n\n# Credit Card ADDRESS\nLOAN_ON_CARD_CHARGED = \"LOAN_ON_CARD_CHARGED\"\nLOAN_ON_CARD_INTEREST_CHARGED = \"LOAN_ON_CARD_INTEREST_CHARGED\"\nLOAN_ON_CARD_PRINCIPAL = \"LOAN_ON_CARD_TOTAL_PRINCIPAL\"\nLOAN_ON_CARD_INTEREST = \"LOAN_ON_CARD_TOTAL_INTEREST\"\nCREDIT_CARD_INTERNAL = \"INTERNAL\"\nCREDIT_CARD_FULL_OUTSTANDING = \"FULL_OUTSTANDING\"\nCREDIT_CARD_OUTSTANDING = \"OUTSTANDING\"\nCREDIT_CARD_AVAILABLE_BALANCE = \"AVAILABLE_BALANCE\"\n\n# Event Type:\nDAILY_PAYMENT = \"DAILY_PAYMENT\"\n\n# OTHER\nDEFAULT_DAYS_OF_MONTH = Decimal(30)\nDEFAULT_DAYS_OF_YEAR = Decimal(365)\n\n# PARAMETERS\nparameters = [\n    Parameter(\n        name=\"denomination\",\n        shape=DenominationShape,\n        level=Level.TEMPLATE,\n        default_value=\"VND\",\n        description=\"Default denomination.\",\n        display_name=\"Default denomination for the contract.\",\n        update_permission=UpdatePermission.FIXED,\n    ),\n    Parameter(\n        name=\"loan_amount\",\n        shape=NumberShape(\n            min_value=Decimal(5000000),\n            max_value=Decimal(10000000),\n            step=Decimal(1000000),\n            kind=NumberKind.MONEY,\n        ),\n        level=Level.INSTANCE,\n        description=\"Keep it like that\",\n        display_name=\"Loan\",\n        default_value=Decimal(5000000),\n        update_permission=UpdatePermission.FIXED,\n    ),\n    Parameter(\n        name=\"interest_rate\",\n        shape=NumberShape(\n            kind=NumberKind.PERCENTAGE,\n            min_value=Decimal(0.07),\n            max_value=Decimal(0.12),\n            step=Decimal(0.01),\n        ),\n        level=Level.TEMPLATE,\n        default_value=Decimal(0.03),\n        description=\"Keep it like that\",\n        display_name=\"Annual interest rate\",\n    ),\n    Parameter(\n        name=\"credit_account_id\",\n        level=Level.INSTANCE,\n        description=\"Credit card account id\",\n        display_name=\"Credit card account id\",\n        shape=AccountIdShape,\n        default_value=\"\",\n        update_permission=UpdatePermission.FIXED,\n    ),\n    Parameter(\n        name=\"tenor\",\n        shape=NumberShape(\n            min_value=Decimal(3),\n            max_value=Decimal(12),\n            step=Decimal(3),\n        ),\n        level=Level.INSTANCE,\n        default_value=1,\n        description=\"The term of the loan\",\n        display_name=\"How long do you want to borrow the money for?\",\n        update_permission=UpdatePermission.FIXED,\n    ),\n    Parameter(\n        name=\"APR\",\n        shape=NumberShape,\n        level=Level.TEMPLATE,\n        default_value=0.0553217,\n        description=\"Keep it like that\",\n        display_name=\"Annual Percentage Rate\",\n        update_permission=UpdatePermission.FIXED,\n    ),\n]\n\n\n@requires(parameters=True)\ndef post_activate_code():\n    start_date = vault.get_account_creation_date()\n    loan_amount = vault.get_parameter_timeseries(name=\"loan_amount\").latest()\n    denomination = vault.get_parameter_timeseries(name=\"denomination\").latest()\n    interest_rate = vault.get_parameter_timeseries(name=\"interest_rate\").latest()\n    credit_account_id = vault.get_parameter_timeseries(\n        name=\"credit_account_id\"\n    ).latest()\n    tenor = vault.get_parameter_timeseries(name=\"tenor\").latest()\n\n    interest_outstanding = _precision_fulfillment(\n        (loan_amount * interest_rate / 12) * tenor\n    )\n    posting_ins = vault.make_internal_transfer_instructions(\n        amount=loan_amount,\n        denomination=denomination,\n        client_transaction_id=vault.get_hook_execution_id()\n        + \"_CAL_OUTSTANDING_PRINCIPAL\",\n        from_account_id=credit_account_id,\n        from_account_address=LOAN_ON_CARD_PRINCIPAL,\n        to_account_id=vault.account_id,\n        to_account_address=OUTSTANDING_PRINCIPAL,\n        pics=[],\n        instruction_details={\"type\": \"LOAN_ON_CARD_ACTIVATION\"},\n        asset=DEFAULT_ASSET,\n    )\n    posting_ins.extend(\n        vault.make_internal_transfer_instructions(\n            amount=interest_outstanding,\n            denomination=denomination,\n            client_transaction_id=vault.get_hook_execution_id()\n            + \"_OUTSTANDING_INTEREST\",\n            from_account_id=credit_account_id,\n            from_account_address=LOAN_ON_CARD_INTEREST,\n            to_account_id=vault.account_id,\n            to_account_address=OUTSTANDING_INTEREST,\n            pics=[],\n            instruction_details={},\n            asset=DEFAULT_ASSET,\n        )\n    )\n    if posting_ins:\n        vault.instruct_posting_batch(\n            posting_instructions=posting_ins, effective_date=start_date\n        )\n\n\n@requires(parameters=True)\ndef execution_schedules():\n    creation_date = vault.get_account_creation_date()\n    return [\n        (\n            DAILY_PAYMENT,\n            {\n                \"hour\": \"0\",\n                \"minute\": \"0\",\n                \"second\": \"0\",\n                \"start_date\": str((creation_date + timedelta(days=1)).day),\n            },\n        )\n    ]\n\n\n@requires(event_type=\"DAILY_PAYMENT\", parameters=True, balances=\"1 day\")\ndef scheduled_code(event_type, effective_date):\n    denomination = vault.get_parameter_timeseries(name=\"denomination\").latest()\n    credit_account_id = vault.get_parameter_timeseries(\n        name=\"credit_account_id\"\n    ).latest()\n    tenor = vault.get_parameter_timeseries(name=\"tenor\").latest()\n    balances = vault.get_balance_timeseries().latest()\n    creation_date = vault.get_account_creation_date()\n\n    # Calculate list of payment-date\n    root_date = creation_date.replace(hour=0, minute=0, second=0)\n    payment_date = _payment_day_list(root_date, tenor)\n    if event_type == DAILY_PAYMENT:\n        posting_ins = []\n        last_time = False\n        if effective_date >= (payment_date[int(tenor) - 2] + timedelta(days=1)):\n            last_time = True\n        monthly_principal, monthly_interest = _calculate_monthly_payment(\n            vault, DEFAULT_DAYS_OF_MONTH, DEFAULT_DAYS_OF_YEAR, balances, last_time\n        )\n\n        daily_principal, daily_accrue = _calculate_daily_payment(\n            vault, DEFAULT_DAYS_OF_MONTH, balances, monthly_principal, monthly_interest\n        )\n        posting_ins.extend(\n            _apply_daily_payment(vault, denomination, daily_principal, daily_accrue)\n        )\n        if effective_date in payment_date:\n            posting_ins.extend(\n                _apply_monthly_payment(\n                    vault,\n                    denomination,\n                    credit_account_id,\n                    monthly_principal,\n                    monthly_interest,\n                )\n            )\n        if posting_ins:\n            vault.instruct_posting_batch(\n                posting_instructions=posting_ins, effective_date=effective_date\n            )\n\n\n# Helper function\ndef _precision_fulfillment(amount):\n    return amount.copy_abs().quantize(Decimal(\"1.\"), rounding=\"ROUND_UP\")\n\n\ndef _precision_accrual(amount):\n    return amount.copy_abs().quantize(Decimal(\".0001\"), rounding=\"ROUND_UP\")\n\n\ndef _payment_day_list(root_date, tenor):\n    rs = []\n    for i in range(int(tenor) + 1):\n        root_date = root_date + timedelta(days=30)\n        rs.append(root_date)\n    return rs\n\n\ndef _calculate_total_interest(vault):\n    principal = vault.get_parameter_timeseries(name=\"loan_amount\").latest()\n    interest_rate = vault.get_parameter_timeseries(name=\"interest_rate\").latest()\n    tenor = vault.get_parameter_timeseries(name=\"tenor\").latest()\n    total_interest = principal * interest_rate * tenor / 12\n    return total_interest\n\n\ndef _calculate_emi(vault):\n    principal = vault.get_parameter_timeseries(name=\"loan_amount\").latest()\n    tenor = vault.get_parameter_timeseries(name=\"tenor\").latest()\n    total_interest = _calculate_total_interest(vault)\n    return _precision_accrual((principal + total_interest) / tenor)\n\n\ndef _calculate_apr(vault):\n    return 0.0553217  # APR WITH INTEREST RATE = 3%\n\n\ndef _calculate_monthly_irr(vault, days_of_month, days_of_year):\n    apr = _calculate_apr(vault)\n    return _precision_accrual(apr * Decimal(days_of_month) / Decimal(days_of_year))\n\n\ndef _calculate_monthly_payment(vault, days_of_month, days_of_year, balances, last_time):\n    denomination = vault.get_parameter_timeseries(name=\"denomination\").latest()\n    outstanding_principal = abs(\n        balances[\n            (OUTSTANDING_PRINCIPAL, DEFAULT_ASSET, denomination, Phase.COMMITTED)\n        ].net\n    )\n    if last_time:\n        monthly_principal = outstanding_principal\n        monthly_interest = abs(\n            balances[\n                (OUTSTANDING_INTEREST, DEFAULT_ASSET, denomination, Phase.COMMITTED)\n            ].net\n        )\n    else:\n        monthly_irr = _calculate_monthly_irr(vault, days_of_month, days_of_year)\n        monthly_interest = _precision_accrual(monthly_irr * outstanding_principal)\n        emi = _calculate_emi(vault)\n        monthly_principal = emi - monthly_interest\n    return monthly_principal, monthly_interest\n\n\ndef _calculate_daily_payment(\n    vault, days_of_month, balances, monthly_principal, monthly_interest\n):\n    denomination = vault.get_parameter_timeseries(name=\"denomination\").latest()\n    value_of_all_daily_interest_before = abs(\n        balances[(DAILY_ACCRUED, DEFAULT_ASSET, denomination, Phase.COMMITTED)].net\n    )\n    value_of_all_daily_principal_before = abs(\n        balances[(DAILY_PRINCIPAL, DEFAULT_ASSET, denomination, Phase.COMMITTED)].net\n    )\n    daily_accrue = min(\n        _precision_accrual(monthly_interest / days_of_month),\n        monthly_interest - value_of_all_daily_interest_before,\n    )\n    daily_principal = min(\n        _precision_accrual(monthly_principal / days_of_month),\n        monthly_principal - value_of_all_daily_principal_before,\n    )\n    return daily_principal, daily_accrue\n\n\ndef _apply_daily_payment(vault, denomination, daily_principal, daily_accrue):\n    posting_ins = []\n    if daily_accrue > 0.001:\n        posting_ins.extend(\n            vault.make_internal_transfer_instructions(\n                amount=daily_accrue,\n                denomination=denomination,\n                client_transaction_id=vault.get_hook_execution_id()\n                + \"_INTERNAL--DAILY_ACCRUED\",\n                from_account_id=vault.account_id,\n                from_account_address=INTERNAL_CONTRA,\n                to_account_id=vault.account_id,\n                to_account_address=DAILY_ACCRUED,\n                pics=[],\n                instruction_details={\"description\": \"BOOK_INTERNAL_DAILY_ACCRUED\"},\n                asset=DEFAULT_ASSET,\n            )\n        )\n    if daily_principal > 0.001:\n        posting_ins.extend(\n            vault.make_internal_transfer_instructions(\n                amount=daily_principal,\n                denomination=denomination,\n                client_transaction_id=vault.get_hook_execution_id()\n                + \"_INTERNAL--DAILY_PRINCIPAL\",\n                from_account_id=vault.account_id,\n                from_account_address=INTERNAL_CONTRA,\n                to_account_id=vault.account_id,\n                to_account_address=DAILY_PRINCIPAL,\n                pics=[],\n                instruction_details={\"description\": \"BOOK_INTERNAL_DAILY_PRINCIPAL\"},\n                asset=DEFAULT_ASSET,\n            )\n        )\n    return posting_ins\n\n\ndef _apply_monthly_payment(\n    vault, denomination, credit_account_id, monthly_principal, monthly_interest\n):\n    if monthly_interest > 0:\n        posting_ins = vault.make_internal_transfer_instructions(\n            amount=monthly_interest,\n            denomination=denomination,\n            from_account_id=vault.account_id,\n            from_account_address=DAILY_ACCRUED,\n            to_account_id=vault.account_id,\n            to_account_address=INTERNAL_CONTRA,\n            asset=DEFAULT_ASSET,\n            client_transaction_id=vault.get_hook_execution_id()\n            + \"_DAILY_ACCRUED--INTERNAL\",\n            instruction_details={\"description\": \"REBOOK_DAILY_ACCRUED_INTERNAL\"},\n        )\n        posting_ins.extend(\n            vault.make_internal_transfer_instructions(\n                amount=monthly_principal,\n                denomination=denomination,\n                client_transaction_id=vault.get_hook_execution_id()\n                + \"DAILY_PRINCIPAL--INTERNAL\",\n                from_account_id=vault.account_id,\n                from_account_address=DAILY_PRINCIPAL,\n                to_account_id=vault.account_id,\n                to_account_address=INTERNAL_CONTRA,\n                pics=[],\n                instruction_details={\"description\": \"OUTSTANDING_PRINCIPAL--INTERNAL\"},\n                asset=DEFAULT_ASSET,\n            )\n        )\n        # related Credit Card posting\n        posting_ins.extend(\n            vault.make_internal_transfer_instructions(\n                amount=monthly_principal,\n                denomination=denomination,\n                client_transaction_id=vault.get_hook_execution_id()\n                + \"OUTSTANDING_PRINCIPAL--LOAN_ON_CARD_PRINCIPAL\",\n                from_account_id=vault.account_id,\n                from_account_address=OUTSTANDING_PRINCIPAL,\n                to_account_id=credit_account_id,\n                to_account_address=LOAN_ON_CARD_PRINCIPAL,\n                pics=[],\n                instruction_details={\n                    \"description\": \"OUTSTANDING_PRINCIPAL--LOAN_ON_CARD_PRINCIPAL\"\n                },\n                asset=DEFAULT_ASSET,\n            )\n        )\n        posting_ins.extend(\n            vault.make_internal_transfer_instructions(\n                amount=monthly_interest,\n                denomination=denomination,\n                client_transaction_id=vault.get_hook_execution_id()\n                + \"_OUTSTANDING_INTEREST--LOAN_ON_CARD_INTEREST\",\n                from_account_id=vault.account_id,\n                from_account_address=OUTSTANDING_INTEREST,\n                to_account_id=credit_account_id,\n                to_account_address=LOAN_ON_CARD_INTEREST,\n                pics=[],\n                instruction_details={\n                    \"description\": \"OUTSTANDING_INTEREST--LOAN_ON_CARD_INTEREST\"\n                },\n                asset=DEFAULT_ASSET,\n            )\n        )\n        posting_ins.extend(\n            vault.make_internal_transfer_instructions(\n                amount=monthly_principal,\n                denomination=denomination,\n                client_transaction_id=vault.get_hook_execution_id()\n                + \"CREDIT_CARD_INTERNAL--LOAN_ON_CARD_PRINCIPAL\",\n                from_account_id=credit_account_id,\n                from_account_address=LOAN_ON_CARD_CHARGED,\n                to_account_id=credit_account_id,\n                to_account_address=CREDIT_CARD_INTERNAL,\n                pics=[],\n                instruction_details={\n                    \"description\": \"CREDIT_CARD_INTERNAL--LOAN_ON_CARD_PRINCIPAL\"\n                },\n                asset=DEFAULT_ASSET,\n            )\n        )\n        posting_ins.extend(\n            vault.make_internal_transfer_instructions(\n                amount=monthly_principal,\n                denomination=denomination,\n                client_transaction_id=vault.get_hook_execution_id()\n                + \"CREDIT_CARD_INTERNAL--CREDIT_CARD_FULL_OUTSTANDING-\",\n                from_account_id=credit_account_id,\n                from_account_address=CREDIT_CARD_FULL_OUTSTANDING,\n                to_account_id=credit_account_id,\n                to_account_address=CREDIT_CARD_INTERNAL,\n                pics=[],\n                instruction_details={\n                    \"description\": \"CREDIT_CARD_INTERNAL--CREDIT_CARD_FULL_OUTSTANDING\"\n                },\n                asset=DEFAULT_ASSET,\n            )\n        )\n        posting_ins.extend(\n            vault.make_internal_transfer_instructions(\n                amount=monthly_principal,\n                denomination=denomination,\n                client_transaction_id=vault.get_hook_execution_id()\n                + \"CREDIT_CARD_INTERNAL--CREDIT_CARD_OUTSTANDING-\",\n                from_account_id=credit_account_id,\n                from_account_address=CREDIT_CARD_OUTSTANDING,\n                to_account_id=credit_account_id,\n                to_account_address=CREDIT_CARD_INTERNAL,\n                pics=[],\n                instruction_details={\n                    \"description\": \"CREDIT_CARD_INTERNAL--CREDIT_CARD_OUTSTANDING\"\n                },\n                asset=DEFAULT_ASSET,\n            )\n        )\n        posting_ins.extend(\n            vault.make_internal_transfer_instructions(\n                amount=monthly_principal,\n                denomination=denomination,\n                client_transaction_id=vault.get_hook_execution_id()\n                + \"CREDIT_CARD_AVAILABLE_BALANCE--CREDIT_CARD_INTERNAL-\",\n                from_account_id=credit_account_id,\n                from_account_address=CREDIT_CARD_INTERNAL,\n                to_account_id=credit_account_id,\n                to_account_address=CREDIT_CARD_AVAILABLE_BALANCE,\n                pics=[],\n                instruction_details={\n                    \"description\": \"CREDIT_CARD_AVAILABLE_BALANCE--CREDIT_CARD_INTERNAL\"\n                },\n                asset=DEFAULT_ASSET,\n            )\n        )\n        posting_ins.extend(\n            vault.make_internal_transfer_instructions(\n                amount=monthly_interest,\n                denomination=denomination,\n                client_transaction_id=vault.get_hook_execution_id()\n                + \"_CREDIT_CARD_INTERNAL--LOAN_ON_CARD_INTEREST_CHARGED\",\n                from_account_id=credit_account_id,\n                from_account_address=LOAN_ON_CARD_INTEREST_CHARGED,\n                to_account_id=credit_account_id,\n                to_account_address=CREDIT_CARD_INTERNAL,\n                pics=[],\n                instruction_details={\n                    \"description\": \"CREDIT_CARD_INTERNAL--LOAN_ON_CARD_INTEREST_CHARGED\"\n                },\n                asset=DEFAULT_ASSET,\n            )\n        )\n        posting_ins.extend(\n            vault.make_internal_transfer_instructions(\n                amount=monthly_interest,\n                denomination=denomination,\n                client_transaction_id=vault.get_hook_execution_id()\n                + \"CREDIT_CARD_INTERNAL--CREDIT_CARD_FULL_OUTSTANDING\",\n                from_account_id=credit_account_id,\n                from_account_address=CREDIT_CARD_FULL_OUTSTANDING,\n                to_account_id=credit_account_id,\n                to_account_address=CREDIT_CARD_INTERNAL,\n                pics=[],\n                instruction_details={\n                    \"description\": \"CREDIT_CARD_INTERNAL--CREDIT_CARD_FULL_OUTSTANDING\"\n                },\n                asset=DEFAULT_ASSET,\n            )\n        )\n        posting_ins.extend(\n            vault.make_internal_transfer_instructions(\n                amount=monthly_interest,\n                denomination=denomination,\n                client_transaction_id=vault.get_hook_execution_id()\n                + \"CREDIT_CARD_INTERNAL--CREDIT_CARD_OUTSTANDING\",\n                from_account_id=credit_account_id,\n                from_account_address=CREDIT_CARD_OUTSTANDING,\n                to_account_id=credit_account_id,\n                to_account_address=CREDIT_CARD_INTERNAL,\n                pics=[],\n                instruction_details={\n                    \"description\": \"CREDIT_CARD_INTERNAL--CREDIT_CARD_OUTSTANDING\"\n                },\n                asset=DEFAULT_ASSET,\n            )\n        )\n        return posting_ins",
            "smart_contract_param_vals": {
                "denomination": "VND",
                "interest_rate": "0.03",
                "APR": "0.0553217"
            }
        },
        {
            "smart_contract_version_id": "43",
            "code": "display_name = \"Bank Credit Annual Fee\"\napi = \"3.9.0\"\nversion = \"0.0.1\"\nsummary = \"The bank account to track the annual fee for credit card accounts\"\ntside = Tside.ASSET\nsupported_denominations = [\"VND\"]\n\n\nparameters = [\n    Parameter(\n        name=\"denomination\",\n        shape=DenominationShape,\n        level=Level.TEMPLATE,\n        description=\"Currency in which the product operates.\",\n        display_name=\"Denomination\",\n        default_value=\"VND\",\n    ),\n]\n\n\n@requires(parameters=True, balances=\"latest\")\ndef pre_posting_code(postings, effective_date):\n    denomination = vault.get_parameter_timeseries(name=\"denomination\").latest()\n\n    if any(posting.denomination not in denomination for posting in postings):\n        raise Rejected(\n            \"Cannot make transactions in given denomination; \"\n            \"transactions must be in {}\".format(denomination),\n            reason_code=RejectedReason.WRONG_DENOMINATION,\n        )",
            "smart_contract_param_vals": {
                "denomination": "VND"
            }
        },
        {
            "smart_contract_version_id": "41",
            "code": "display_name = \"Bank Credit Interest\"\napi = \"3.9.0\"\nversion = \"0.0.1\"\nsummary = \"The bank account to track the interest for credit card accounts\"\ntside = Tside.ASSET\nsupported_denominations = [\"VND\"]\n\n\nparameters = [\n    Parameter(\n        name=\"denomination\",\n        shape=DenominationShape,\n        level=Level.TEMPLATE,\n        description=\"Currency in which the product operates.\",\n        display_name=\"Denomination\",\n        default_value=\"VND\",\n    ),\n]\n\n\n@requires(parameters=True, balances=\"latest\")\ndef pre_posting_code(postings, effective_date):\n    denomination = vault.get_parameter_timeseries(name=\"denomination\").latest()\n\n    if any(posting.denomination not in denomination for posting in postings):\n        raise Rejected(\n            \"Cannot make transactions in given denomination; \"\n            \"transactions must be in {}\".format(denomination),\n            reason_code=RejectedReason.WRONG_DENOMINATION,\n        )",
            "smart_contract_param_vals": {
                "denomination": "VND"
            }
        },
        {
            "smart_contract_version_id": "42",
            "code": "display_name = \"Bank Late Fee\"\napi = \"3.9.0\"\nversion = \"0.0.1\"\nsummary = \"The bank account to track the late fee for credit card accounts\"\ntside = Tside.ASSET\nsupported_denominations = [\"VND\"]\n\n\nparameters = [\n    Parameter(\n        name=\"denomination\",\n        shape=DenominationShape,\n        level=Level.TEMPLATE,\n        description=\"Currency in which the product operates.\",\n        display_name=\"Denomination\",\n        default_value=\"VND\",\n    ),\n]\n\n\n@requires(parameters=True, balances=\"latest\")\ndef pre_posting_code(postings, effective_date):\n    denomination = vault.get_parameter_timeseries(name=\"denomination\").latest()\n\n    if any(posting.denomination not in denomination for posting in postings):\n        raise Rejected(\n            \"Cannot make transactions in given denomination; \"\n            \"transactions must be in {}\".format(denomination),\n            reason_code=RejectedReason.WRONG_DENOMINATION,\n        )",
            "smart_contract_param_vals": {
                "denomination": "VND"
            }
        },
        {
            "smart_contract_version_id": "40",
            "code": "display_name = \"Bank Credit Default\"\napi = \"3.9.0\"\nversion = \"0.0.1\"\nsummary = (\n    \"The bank account to track inbound and outbound postings for credit card accounts\"\n)\ntside = Tside.ASSET\nsupported_denominations = [\"VND\"]\n\n\nparameters = [\n    Parameter(\n        name=\"denomination\",\n        shape=DenominationShape,\n        level=Level.TEMPLATE,\n        description=\"Currency in which the product operates.\",\n        display_name=\"Denomination\",\n        default_value=\"VND\",\n    ),\n]\n\n\n@requires(parameters=True, balances=\"latest\")\ndef pre_posting_code(postings, effective_date):\n    denomination = vault.get_parameter_timeseries(name=\"denomination\").latest()\n\n    if any(posting.denomination not in denomination for posting in postings):\n        raise Rejected(\n            \"Cannot make transactions in given denomination; \"\n            \"transactions must be in {}\".format(denomination),\n            reason_code=RejectedReason.WRONG_DENOMINATION,\n        )",
            "smart_contract_param_vals": {
                "denomination": "VND"
            }
        }
    ],
    "supervisor_contracts": [],
    "start_timestamp": "2022-01-01T00:00:00Z",
    "end_timestamp": "2022-06-15T00:00:00Z",
    "instructions": [
        {
            "timestamp": "2022-01-01T00:00:00Z",
            "create_account": {
                "id": "CREDIT_DEFAULT",
                "product_version_id": "40",
                "instance_param_vals": {}
            }
        },
        {
            "timestamp": "2022-01-01T00:00:00Z",
            "create_account": {
                "id": "CREDIT_INTEREST",
                "product_version_id": "41",
                "instance_param_vals": {}
            }
        },
        {
            "timestamp": "2022-01-01T00:00:00Z",
            "create_account": {
                "id": "CREDIT_LATE_FEE",
                "product_version_id": "42",
                "instance_param_vals": {}
            }
        },
        {
            "timestamp": "2022-01-01T00:00:00Z",
            "create_account": {
                "id": "CREDIT_ANNUAL_FEE",
                "product_version_id": "43",
                "instance_param_vals": {}
            }
        },
        {
            "timestamp": "2022-01-10T13:00:00Z",
            "create_account": {
                "id": "CREDIT",
                "product_version_id": "101",
                "instance_param_vals": {
                    "credit_limit": "10000000",
                    "annual_credit_card_fee": "10000"
                }
            }
        },
        {
            "timestamp": "2022-01-20T15:00:00Z",
            "create_posting_instruction_batch": {
                "client_id": "d982b90c-f54c-4894-bfcd-ed44230fac84",
                "client_batch_id": "caa1d558-21b0-4130-9fd2-2d4780ad3b74",
                "posting_instructions": [
                    {
                        "client_transaction_id": "PURCHASE_74b45ac3-1fe0-4d08-b308-46d5da35807c",
                        "instruction_details": {
                            "type": "TRANSACTION",
                            "transaction_type": "PURCHASE"
                        },
                        "outbound_hard_settlement": {
                            "amount": "200000",
                            "denomination": "VND",
                            "target_account": {
                                "account_id": "CREDIT"
                            },
                            "internal_account_id": "CREDIT_DEFAULT"
                        }
                    }
                ]
            }
        },
        {
            "timestamp": "2022-01-29T15:00:00Z",
            "create_posting_instruction_batch": {
                "client_id": "56fc1358-c21b-44f2-8068-6b32f83bce09",
                "client_batch_id": "5385ee5a-1696-4475-9df6-2c397fc4b0e4",
                "posting_instructions": [
                    {
                        "client_transaction_id": "PURCHASE_50743267-efac-4b75-8dfc-ed2f7776378d",
                        "instruction_details": {
                            "type": "TRANSACTION",
                            "transaction_type": "PURCHASE"
                        },
                        "outbound_hard_settlement": {
                            "amount": "300000",
                            "denomination": "VND",
                            "target_account": {
                                "account_id": "CREDIT"
                            },
                            "internal_account_id": "CREDIT_DEFAULT"
                        }
                    }
                ]
            }
        },
        {
            "timestamp": "2022-02-12T02:00:00Z",
            "create_posting_instruction_batch": {
                "client_id": "e5983707-abdf-4712-9087-3eaf319003bc",
                "client_batch_id": "24e291ca-ca25-4210-8d0a-1b1e16502855",
                "posting_instructions": [
                    {
                        "client_transaction_id": "PURCHASE_7801bbe8-5d18-497e-a214-a130a3023269",
                        "instruction_details": {
                            "type": "TRANSACTION",
                            "transaction_type": "PURCHASE"
                        },
                        "outbound_hard_settlement": {
                            "amount": "400000",
                            "denomination": "VND",
                            "target_account": {
                                "account_id": "CREDIT"
                            },
                            "internal_account_id": "CREDIT_DEFAULT"
                        }
                    }
                ]
            }
        },
        {
            "timestamp": "2022-02-17T02:00:00Z",
            "create_posting_instruction_batch": {
                "client_id": "e6ff9821-b03a-4cd6-b118-742b7aec0154",
                "client_batch_id": "e42a8649-1513-44d7-ac21-117566c13297",
                "posting_instructions": [
                    {
                        "client_transaction_id": "REPAYMENT_9d2eadb4-1b60-4b46-8daf-7488cb6430e5",
                        "instruction_details": {
                            "type": "REPAYMENT"
                        },
                        "inbound_hard_settlement": {
                            "amount": "500000",
                            "denomination": "VND",
                            "target_account": {
                                "account_id": "CREDIT"
                            },
                            "internal_account_id": "CREDIT_DEFAULT"
                        }
                    }
                ]
            }
        },
        {
            "timestamp": "2022-03-04T07:00:00Z",
            "create_posting_instruction_batch": {
                "client_id": "7dc20242-1a01-4f3f-9b26-306c462b4577",
                "client_batch_id": "7986e514-5a82-4589-bc58-294314e51269",
                "posting_instructions": [
                    {
                        "client_transaction_id": "PURCHASE_b8631475-8f59-4c7f-9c77-d7db15f4a0a1",
                        "instruction_details": {
                            "type": "TRANSACTION",
                            "transaction_type": "PURCHASE"
                        },
                        "outbound_hard_settlement": {
                            "amount": "500000",
                            "denomination": "VND",
                            "target_account": {
                                "account_id": "CREDIT"
                            },
                            "internal_account_id": "CREDIT_DEFAULT"
                        }
                    }
                ]
            }
        },
        {
            "timestamp": "2022-03-08T10:00:00Z",
            "create_posting_instruction_batch": {
                "client_id": "02b89bb5-d282-4488-9410-f56c552e9b66",
                "client_batch_id": "1d2e769b-efa5-4db2-bb9b-f6f5b42f43f4",
                "posting_instructions": [
                    {
                        "client_transaction_id": "PURCHASE_d56a96dc-b4df-4296-8c15-75adaad05b08",
                        "instruction_details": {
                            "type": "TRANSACTION",
                            "transaction_type": "PURCHASE"
                        },
                        "outbound_hard_settlement": {
                            "amount": "600000",
                            "denomination": "VND",
                            "target_account": {
                                "account_id": "CREDIT"
                            },
                            "internal_account_id": "CREDIT_DEFAULT"
                        }
                    }
                ]
            }
        },
        {
            "timestamp": "2022-03-20T11:00:00Z",
            "create_posting_instruction_batch": {
                "client_id": "03afa06f-c962-41b8-9bea-91ccee0be6cb",
                "client_batch_id": "5137ee7d-71a4-4c83-9b34-ae9bf1770bbb",
                "posting_instructions": [
                    {
                        "client_transaction_id": "PURCHASE_2f9e3fc7-c275-4b7c-a17f-89103013606e",
                        "instruction_details": {
                            "type": "TRANSACTION",
                            "transaction_type": "PURCHASE"
                        },
                        "outbound_hard_settlement": {
                            "amount": "700000",
                            "denomination": "VND",
                            "target_account": {
                                "account_id": "CREDIT"
                            },
                            "internal_account_id": "CREDIT_DEFAULT"
                        }
                    }
                ]
            }
        },
        {
            "timestamp": "2022-04-04T18:00:00Z",
            "create_posting_instruction_batch": {
                "client_id": "d3157030-cd0d-4b49-b59d-27cf1111a261",
                "client_batch_id": "6bb5fb0e-2dd9-43e3-a1b0-8aae4e510434",
                "posting_instructions": [
                    {
                        "client_transaction_id": "REPAYMENT_f1f27832-bd75-4dd8-93b2-880874d497ec",
                        "instruction_details": {
                            "type": "REPAYMENT"
                        },
                        "inbound_hard_settlement": {
                            "amount": "1000000",
                            "denomination": "VND",
                            "target_account": {
                                "account_id": "CREDIT"
                            },
                            "internal_account_id": "CREDIT_DEFAULT"
                        }
                    }
                ]
            }
        },
        {
            "timestamp": "2022-04-10T12:00:00Z",
            "create_posting_instruction_batch": {
                "client_id": "1a319074-30e8-412a-8d8d-29e756dd538e",
                "client_batch_id": "74d39029-fda8-49f3-b3c6-aa5cd6e8c342",
                "posting_instructions": [
                    {
                        "client_transaction_id": "PURCHASE_51e3dda0-73a1-4c68-a0f2-8457aac09edf",
                        "instruction_details": {
                            "type": "TRANSACTION",
                            "transaction_type": "PURCHASE"
                        },
                        "outbound_hard_settlement": {
                            "amount": "800000",
                            "denomination": "VND",
                            "target_account": {
                                "account_id": "CREDIT"
                            },
                            "internal_account_id": "CREDIT_DEFAULT"
                        }
                    }
                ]
            }
        },
        {
            "timestamp": "2022-04-13T12:00:00Z",
            "create_account": {
                "id": "LOAN_ON_CARD",
                "product_version_id": "102",
                "instance_param_vals": {
                    "credit_account_id": "CREDIT",
                    "loan_amount": "5000000",
                    "tenor": "12"
                }
            }
        },
        {
            "timestamp": "2022-05-14T18:00:00Z",
            "create_posting_instruction_batch": {
                "client_id": "49a6c520-e04a-41ca-ab2d-b5909177df6a",
                "client_batch_id": "67a9d963-9dc7-4ecf-8fba-d4b832739b35",
                "posting_instructions": [
                    {
                        "client_transaction_id": "REPAYMENT_1d610370-7086-478d-a0c8-bb96e62432a4",
                        "instruction_details": {
                            "type": "REPAYMENT"
                        },
                        "inbound_hard_settlement": {
                            "amount": "1000000",
                            "denomination": "VND",
                            "target_account": {
                                "account_id": "CREDIT"
                            },
                            "internal_account_id": "CREDIT_DEFAULT"
                        }
                    }
                ]
            }
        },
        {
            "timestamp": "2022-06-14T18:00:00Z",
            "create_posting_instruction_batch": {
                "client_id": "2f9cb972-67fd-4cc5-a374-d7e3055887b8",
                "client_batch_id": "e37233d6-89f2-457b-9165-fc914034bf42",
                "posting_instructions": [
                    {
                        "client_transaction_id": "REPAYMENT_d6b4e159-f5ee-4009-87c5-a929484aa62f",
                        "instruction_details": {
                            "type": "REPAYMENT"
                        },
                        "inbound_hard_settlement": {
                            "amount": "1000000",
                            "denomination": "VND",
                            "target_account": {
                                "account_id": "CREDIT"
                            },
                            "internal_account_id": "CREDIT_DEFAULT"
                        }
                    }
                ]
            }
        }
    ]
}